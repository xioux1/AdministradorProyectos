Administración de Tareas – Entrega final

Tema elegido: Administración de proyectos (Tema 7)

Alcance de esta entrega:

CRUD completo de Tarea (alta, baja, modificación, consulta, listado)
CRUD de Proyecto y Empleado
Las tareas se vinculan a un proyecto y un empleado con costo por hora

Se añadieron campos de inicio y fin de sprint y un estado para cada tarea.
Se incluyó un tablero Kanban donde es posible mover las tareas entre
estados mediante doble clic.

Arquitectura en tres capas: UI → Service → DAO

Persistencia JDBC sobre H2

Manejo de excepciones: ValidacionException y DAOException

Swing hecho a mano

Estructura del proyecto (carpetas principales):
src/ui   – pantallas Swing
src/service – lógica y validación
src/dao – acceso a datos (in‑memory y JDBC)
src/model – POJOs

Cómo ejecutar:

Compilá todas las clases con `javac` y ejecutá la clase `main.Main`.
Por ejemplo:

```
javac -d bin $(find src -name "*.java")
java -cp bin:<ruta-h2.jar> main.Main
```

Reemplazá `<ruta-h2.jar>` por la ubicación del driver JDBC de H2.
Se necesita JDK 17 o superior. La aplicación crea automáticamente la base de datos
"tareas.db" la primera vez.


Resumen de funcionalidades implementadas:

Esta versión incluye la gestión de tareas, proyectos y empleados. Cada tarea se registra con fechas de sprint, se vincula a un proyecto y responsable con costo por hora y puede moverse entre estados desde el tablero Kanban. Los datos se validan y se persisten en H2 mediante JDBC.

## Consideraciones generales del Trabajo Práctico

El desarrollo se planificó en dos etapas. En la **primera entrega** se realizó un
alcance reducido para implementar un CRUD completo de una sola entidad con manejo
de excepciones y pantallas Swing. Esta segunda etapa corresponde a la **entrega
final**, en la que se completó el resto de las entidades y la funcionalidad
solicitada.

El lineamiento general fue diseñar entre cuatro y seis entidades manteniendo un
fuerte énfasis en diseño orientado a objetos. No se evalúa el diseño de base de
datos ni SQL, sino el nivel de cohesión, acoplamiento y reutilización de código.
Las entregas deben defenderse explicando las decisiones de diseño tomadas.

Cada trabajo práctico se aprueba con un mínimo de 4 puntos. La funcionalidad
básica es obligatoria para aprobar, mientras que los adicionales y "bonus points"
permiten mejorar la calificación si el desarrollo completo está presente.
